package routines;

import java.util.Scanner;

/*
 * user specification: the function's comment should contain keys as follows: 1. write about the function's comment.but
 * it must be before the "{talendTypes}" key.
 * 
 * 2. {talendTypes} 's value must be talend Type, it is required . its value should be one of: String, char | Character,
 * long | Long, int | Integer, boolean | Boolean, byte | Byte, Date, double | Double, float | Float, Object, short |
 * Short
 * 
 * 3. {Category} define a category for the Function. it is required. its value is user-defined .
 * 
 * 4. {param} 's format is: {param} <type>[(<default value or closed list values>)] <name>[ : <comment>]
 * 
 * <type> 's value should be one of: string, int, list, double, object, boolean, long, char, date. <name>'s value is the
 * Function's parameter name. the {param} is optional. so if you the Function without the parameters. the {param} don't
 * added. you can have many parameters for the Function.
 * 
 * 5. {example} gives a example for the Function. it is optional.
 */
public class contactProcessing {

    /**
     * helloExample: not return value, only print "hello" + message.
     * 
     * 
     * {talendTypes} String
     * 
     * {Category} User Defined
     * 
     * {param} string("world") input: The string need to be printed.
     * 
     * {example} helloExemple("world") # hello world !.
     */
    public static int getAddressVoRefID(int entityTypeVoRefID, long idAddressType) {
        if (entityTypeVoRefID ==1 && idAddressType == 1)        {      	return 1000000;        }
        else if (entityTypeVoRefID !=101 && idAddressType == 1) {       return 1000000;        }
        //else if (entityTypeVoRefID !=1 && idAddressType == 1)   {        	return 6;        }
        else if (entityTypeVoRefID ==1 && idAddressType == 2)   {        	return 1;        }
        else if (entityTypeVoRefID !=1 && idAddressType == 2)   {        	return 6;        }
        else if (entityTypeVoRefID ==1 && idAddressType == 3)   {        	return 1;        }
        else if (entityTypeVoRefID !=1 && idAddressType == 3)   {        	return 6;        }
        else {        	return 1000001;        }	
                   
    }


	public static String getAddressVoRefDesc(int entityTypeVoRefID, long idAddressType) {
	    if (entityTypeVoRefID ==1 && idAddressType == 1) 		{	    return "Standard address";	    }
	    else if (entityTypeVoRefID !=101 && idAddressType == 1) {   	return "Standard address";	    }
	    //else if (entityTypeVoRefID !=1 && idAddressType == 1) 	{   	return "Registered office";	    }
	    else if (entityTypeVoRefID ==1 && idAddressType == 2) 	{	    	return "Private address";	    }
	    else if (entityTypeVoRefID !=1 && idAddressType == 2) 	{	    	return "Registered office";	    }
	    else if (entityTypeVoRefID ==1 && idAddressType == 3) 	{	    	return "Private address";	    }
	    else if (entityTypeVoRefID !=1 && idAddressType == 3) 	{	    	return "Registered office";	    }
	    else {	    	return "Correspondence address";	    }	
               
	}
    /// HouseNr and ProvinceName
    
    public static AddressDetails parseHouseNr(String houseNr) {  
        int sign = -1;
        try {
            sign = new Scanner(houseNr).useDelimiter("\\D+").nextInt();
        }catch(Exception e){
            // do nothing
        }

        if(sign > 0){
            int index = houseNr.indexOf(Integer.toString(sign));
            int len = houseNr.length();
            String houseNumber = houseNr.substring(index,len).trim();
            String provinceName = houseNr.substring(0,index).trim();
            return new AddressDetails(houseNumber,provinceName);
        }else{
            return new AddressDetails(houseNr);
        }

    	
    	
    }
}
