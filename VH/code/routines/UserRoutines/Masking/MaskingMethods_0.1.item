package routines;

import org.apache.commons.lang3.math.NumberUtils;
import java.util.Random;

// Each method could have only one input parameter of type String
// Inside the input parameters are concatenated a standard parameters (entityID and value before masking)and parameters defined by user in maskingRules table


public class MaskingMethods {   
// =============================================
// Author:		Piotr K
// Create date: 2023-04-14
// Description:	returnRandomStringGivenLength(<String EntityID, String currentValue>, int minLength, int maxLength)
// 				parameters in <> are given by masking engine, parameters defined in control tables are concatenated after them. 
//				Method return a random String. Length of the string is between two given parameters. 
// =============================================
	public static String returnRandomStringGivenLength(String params) {		
		String[] args = params.split("\\;");
		int minLength = NumberUtils.toInt(args[2]);
		int maxLength = NumberUtils.toInt(args[3]);		
		Random random = new Random();		
		String ran = DataMasking.createRandomString(random.nextInt(minLength, maxLength));
        return ran;
    }	

	// =============================================
	// Author:		Piotr K
	// Create date: 2023-04-17
	// Description:	returnRandomIntRange(<String EntityID, String currentValue>, int minValue, int maxValue)
//	 				parameters in <> are given by masking engine, parameters defined in control tables are concatenated after them. 
//					Method return a random int. Value of the int is between given parameters.
	// =============================================
		public static int returnRandomIntRange(String params) {		
			String[] args = params.split("\\;");
			int minLength = NumberUtils.toInt(args[2]);
			int maxLength = NumberUtils.toInt(args[3]);		
			Random random = new Random();		
			int ran = random.nextInt(minLength, maxLength);
	        return ran;
	    }	
}
