package routines;

public class ContactProcessingVHP {
	
	/// ContactIVO -> EntityTypeVORef
    public static EntityTypeVORef returnEntityTypeVORef(long idPartnerType) {
    	if(idPartnerType == 1 || idPartnerType == 8 || idPartnerType == 9) {
    		return new EntityTypeVORef(1, "Individual");
    	} else if (idPartnerType == 2 || idPartnerType == 4 || idPartnerType == 5 || idPartnerType == 7 || idPartnerType == 10) {
    		return new EntityTypeVORef(101, "Legal Entity");
    	} else if (idPartnerType == 3 || idPartnerType == 6) {
    		return new EntityTypeVORef(10003, "Self-employed");
    	} else {    	
    		return new EntityTypeVORef(-1, "");
    	}
    }
    /// ContactEmailVO -> EmailTypeVORef
    
    public static EmailTypeVORef returnEmailTypeVORef(int entityTypeVORefID, String emailNumber, int type1Seq, int type2Seq) {    	
    	if(entityTypeVORefID == 1 && emailNumber.equals("1") && type1Seq == 1) {
    		//EmailTypeVORef emailType = new EmailTypeVORef(1, "Private");
    		//return emailType;
    		return new EmailTypeVORef(1, "Private");
    	}else if (entityTypeVORefID != 1 && emailNumber.equals("1") && type1Seq == 1) {
    		//EmailTypeVORef emailType = new EmailTypeVORef(2, "Work");
    		//return emailType;
    		return new EmailTypeVORef(2, "Work");
    	}  	
    	else {
    		//EmailTypeVORef emailType = new EmailTypeVORef(10009, "Unknown");
    		//return emailType;
    		return new EmailTypeVORef(10009, "Unknown");
    	}
    }
    
    public static int returnEmailTypeVORefID(EmailTypeVORef email) {
    	return email.getId();
    }
    public static String returnEmailTypeVORefContent(EmailTypeVORef email) {
    	return email.getContent();
    }
    
    /// External contact number logic///
    public static String returnExternalContactNumber(long partnerID) {
    	String external = "MIG_MP-" + Long.toString(partnerID); 
    	return external;
    } 
    
    public static String returnExternalContactNumber(long partnerID, boolean isTestLoad, int migrationID) {
    	String external = "MIG_MP-" + Long.toString(partnerID);    	
    	if(isTestLoad) {
    		external = external +"_"+Integer.toString(migrationID);
    	} 	
    	return external;
    }
    
     
    
    
	/// UNIVERSAL TOOLS/// 
    public static boolean checkStringNotEmpty (String string) {
    	if (string == null || string.isEmpty() || string.trim().isEmpty()) { 
    	    return true;
    	}else {
    		return false;
    	}
    }
    
    public static String firstWord (String string) {
    	if(checkStringNotEmpty(string)) {
    		return "";
    	}else {
    		string = string.trim();
    		int i = string.indexOf(' ');
    		if(i == -1){
                return string;
            }else{
                String word = string.substring(0, i);
                return word;
            }
    	}
    }
    
    
    
    
}