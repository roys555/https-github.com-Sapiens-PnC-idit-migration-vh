package routines;

/*
 * user specification: the function's comment should contain keys as follows: 1. write about the function's comment.but
 * it must be before the "{talendTypes}" key.
 * 
 * 2. {talendTypes} 's value must be talend Type, it is required . its value should be one of: String, char | Character,
 * long | Long, int | Integer, boolean | Boolean, byte | Byte, Date, double | Double, float | Float, Object, short |
 * Short
 * 
 * 3. {Category} define a category for the Function. it is required. its value is user-defined .
 * 
 * 4. {param} 's format is: {param} <type>[(<default value or closed list values>)] <name>[ : <comment>]
 * 
 * <type> 's value should be one of: string, int, list, double, object, boolean, long, char, date. <name>'s value is the
 * Function's parameter name. the {param} is optional. so if you the Function without the parameters. the {param} don't
 * added. you can have many parameters for the Function.
 * 
 * 5. {example} gives a example for the Function. it is optional.
 */
public class ContactProcessingAGR {

	/// AddressIVO -> CountryVORef
    public static GenericVORef returnCountryVORef(String i_code) {
    	i_code =" D  ";
    	i_code = i_code.trim();
    	if(i_code.equals( "A"))       {	return new GenericVORef(13, "AUSTRIA"); }
    	else if (i_code == "B") {	return new GenericVORef(1, "BELGIUM"); }
    	else if (i_code == "CH") {	return new GenericVORef(195, "SWITZERLAND"); }
    	else if (i_code == "CZ") {	return new GenericVORef(54, "CZECH REPUBLIC"); }
    	else if (i_code.equals ("D")) {	return new GenericVORef(77, "GERMANY"); }
    	else if (i_code == "DK") {	return new GenericVORef(55, "DENMARK"); }
    	else if (i_code == "E") {	return new GenericVORef(64, "ESTONIA"); }
    	else {    	
    		return new GenericVORef(-1, i_code);
    	}
    }
    
   /// ContactBankAccountIVO -> bankAccountExternalNumber logic   
    
    public static String returnbankAccountExternalNumber(long partnerID, long bankAccountId, boolean isTestLoad, int migrationID) {
    	String external = "MIG-" + Long.toString(partnerID) + "-" + Long.toString(bankAccountId);
    	if(isTestLoad) {
    		external = external +"_"+Integer.toString(migrationID);
    	} 	
    	return external;
    }


}
